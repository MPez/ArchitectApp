/*
 * File: app/controller/ArchitectApp.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ArchitectApp.controller.ArchitectApp', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.MessageBox',
        'Ext.JSON',
        'Ext.device.Geolocation'
    ],

    config: {
        control: {
            "button#locateButton": {
                tap: 'onLocateButtonTap'
            },
            "button#positionButton": {
                tap: 'onPositionButtonTap'
            },
            "button#backLocationButton": {
                tap: 'onBackLocationButtonTap'
            },
            "list#sensorList": {
                itemtap: 'onSensorListItemTap'
            },
            "button#cameraButton": {
                tap: 'onCameraButtonTap'
            },
            "button#galleryButton": {
                tap: 'onGalleryButtonTap'
            },
            "button#loadContactsButton": {
                tap: 'onLoadContactsButtonTap'
            },
            "button#trashContactsButton": {
                tap: 'onTrashContactsButtonTap'
            },
            "button#barcodeButton": {
                tap: 'onBarcodeButtonTap'
            },
            "button#saveFileButton": {
                tap: 'onSaveFileButtonTap'
            },
            "button#cancelFileButton": {
                tap: 'onCancelFileButtonTap'
            },
            "button#loadFileButton": {
                tap: 'onLoadFileButtonTap'
            },
            "button#deleteFileButton": {
                tap: 'onDeleteFileButtonTap'
            },
            "button#backupFileButton": {
                tap: 'onBackupFileButtonTap'
            },
            "button#restoreFileButton": {
                tap: 'onRestoreFileButtonTap'
            },
            "button#audioButton": {
                tap: 'onAudioButtonTap'
            },
            "button#videoButton": {
                tap: 'onVideoButtonTap'
            },
            "button#imageButton": {
                tap: 'onImageButtonTap'
            },
            "list#mediaList": {
                disclose: 'onMediaListDisclose'
            },
            "button#backMediaButton": {
                tap: 'onBackMediaButtonTap'
            }
        }
    },

    onLocateButtonTap: function(button, e, eOpts) {
        console.log('onLocateButtonTap');

        var locationOptions = {
            timeout: 15000,
            enableHighAccuracy: true
        };

        navigator.geolocation.getCurrentPosition(this.onLocateSuccess, this.onLocateError, locationOptions);


        Ext.device.Geolocation.getCurrentPosition({
            success: this.onLocateSuccess,
            failure: function() {
                console.log('onLocateFailure');

                Ext.Msg.alert('Error', 'Something went wrong!');
            },
            timeout: 15000,
            allowHighAccuracy: true
        });

    },

    onPositionButtonTap: function(button, e, eOpts) {
        console.log('onPositionButtonTap');

        Ext.getStore('Positions').load();
        var container = Ext.ComponentQuery.query('container#locationView');
        container[0].setActiveItem('#locationVisitedPanel');
    },

    onBackLocationButtonTap: function(button, e, eOpts) {
        console.log('onBackLocationButtonTap');

        var container = Ext.ComponentQuery.query('container#locationView');
        container[0].setActiveItem('#locationPanel');
    },

    onSensorListItemTap: function(dataview, index, target, record, e, eOpts) {
        console.log('onSensorListItemTap');

        var title = record.get('name');
        var name = title.toLowerCase();

        if(name == 'geolocation') {
            Ext.ComponentQuery.query('container#mainView')[0].setActiveItem('#locationView');
        } else {
            if(name == 'contacts') {
                Ext.ComponentQuery.query('button#loadContactsButton')[0].setHidden(false);
                Ext.ComponentQuery.query('button#trashContactsButton')[0].setHidden(false);
                Ext.ComponentQuery.query('button#backMediaButton')[0].setHidden(true);
            } else {
                Ext.ComponentQuery.query('button#loadContactsButton')[0].setHidden(true);
                Ext.ComponentQuery.query('button#trashContactsButton')[0].setHidden(true);
                Ext.ComponentQuery.query('button#backMediaButton')[0].setHidden(true);

                if(name == 'file') {
                    console.log('onFileItem');

                    name += 'Form';

                    var personalInfoStore = Ext.getStore('PersonalInfos'),
                        newInfo = null;

                    if (personalInfoStore.getCount() === 0) {
                        newInfo = Ext.create('ArchitectApp.model.PersonalInfo', {
                            id: 1,
                            name: 'Soluzioni',
                            surname: 'Software',
                            email: 'info@soluzioni-sw.it',
                            address: 'Via dei Ronchi 21',
                            birthday: '1986-01-01',
                            sex: 'male',
                            colour: 'blue' ,
                            touch: '',
                            cordova: '',
                            architect: '',
                            note: ''
                        });
                    } else {
                        newInfo = personalInfoStore.getAt(0);
                    }

                    var form = Ext.ComponentQuery.query('#fileForm')[0];
                    form.setRecord(newInfo);

                } else if(name == 'device') {
                    var deviceRecord = Ext.create('ArchitectApp.model.DeviceInfo', {
                        model: device.model,
                        platform: device.platform,
                        version: device.version,
                        cordova: device.cordova,
                        uuid: device.uuid
                    });
                    Ext.ComponentQuery.query('panel#device')[0].setRecord(deviceRecord);
                }
            }

            Ext.ComponentQuery.query('titlebar#homeTitleBar')[0].setTitle(title);
            Ext.ComponentQuery.query('container#sensorView')[0].setActiveItem('#' + name);
        }
    },

    onCameraButtonTap: function(button, e, eOpts) {
        console.log('onCameraButtonTap');

        navigator.camera.getPicture(this.onCameraCaptureSuccess, this.onCameraCaptureFailure, {
            quality : 100,
            destinationType : Camera.DestinationType.FILE_URI,
            sourceType : Camera.PictureSourceType.CAMERA,
            encodingType: Camera.EncodingType.JPEG,
            targetWidth: 400,
            targetHeight: 400,
            correctOrientation: true,
            saveToPhotoAlbum: false
        });


        /*Ext.device.Camera.capture({
        success: this.onCameraCaptureSuccess,
        failure: this.onCameraCaptureFailure,
        quality: 100,
        source: 'camera',
        width: 400,
        height: 400,
        destination: 'file'
        });*/
    },

    onGalleryButtonTap: function(button, e, eOpts) {
        console.log('onGalleryButtonTap');

        navigator.camera.getPicture(this.onCameraCaptureSuccess, this.onCameraCaptureFailure, {
            quality : 100,
            destinationType : Camera.DestinationType.FILE_URI,
            sourceType : Camera.PictureSourceType.PHOTOLIBRARY,
            encodingType: Camera.EncodingType.JPEG,
            targetWidth: 400,
            targetHeight: 400,
            correctOrientation: true,
            saveToPhotoAlbum: false
        });


        /*Ext.device.Camera.capture({
        success: this.onCameraCaptureSuccess,
        failure: this.onCameraCaptureFailure,
        quality: 100,
        source: 'library',
        width: 400,
        height: 400,
        destination: 'file'
        });*/
    },

    onLoadContactsButtonTap: function(button, e, eOpts) {
        console.log('onLoadContactsButtonTap');

        var contactFields = ['*'];
        var contactFindOptions = {
            filter: '',
            multiple: true
        };
        navigator.contacts.find(contactFields, this.onContactSuccess, this.onContactError, contactFindOptions);
    },

    onTrashContactsButtonTap: function(button, e, eOpts) {
        console.log('onTrashContactsButtonTap');

        var store = Ext.getStore('Contacts');
        store.removeAll();
        store.sync();
    },

    onBarcodeButtonTap: function(button, e, eOpts) {
        console.log('onScanBarcodeBUttonTap');

        cordova.plugins.barcodeScanner.scan(success, fail);

        function success(result) {
            console.log('success');

            if (!result.cancelled) {
                var barcode = Ext.create('ArchitectApp.model.Barcode', {
                    code: result.text,
                    format: result.format
                });
                var barcodeStore = Ext.getStore('Barcodes');
                barcodeStore.add(barcode);
                barcodeStore.sync();
            }
        }

        function fail(error) {
            console.log('fail');
            Ext.Msg.alert('Error', error);
        }
    },

    onSaveFileButtonTap: function(button, e, eOpts) {
        console.log('onSaveFileButtonTap');

        var form = Ext.ComponentQuery.query('#fileForm')[0];
        var currentInfo = form.getRecord();
        var newValues = form.getValues();

        currentInfo.set('name', newValues.name);
        currentInfo.set('surname', newValues.surname);
        currentInfo.set('email', newValues.email);
        currentInfo.set('address', newValues.address);
        currentInfo.set('birthday', newValues.birthday);
        currentInfo.set('sex', newValues.sex);
        currentInfo.set('colour', newValues.colour);
        currentInfo.set('touch', newValues.touch);
        currentInfo.set('cordova', newValues.cordova);
        currentInfo.set('architect', newValues.architect);
        currentInfo.set('note', newValues.note);

        var errors = currentInfo.validate();

        if (!errors.isValid()) {
            errors.each(function(error) {
                Ext.Msg.alert('Wait!', error.getMessage(), Ext.emptyFn);
            });
            currentInfo.reject();
            return;
        }

        var personalInfoStore = Ext.getStore('PersonalInfos');
        personalInfoStore.insert(0,currentInfo);
        personalInfoStore.sync();

        Ext.Msg.alert('Attention', 'The Personal Info\'s store has been saved.');
    },

    onCancelFileButtonTap: function(button, e, eOpts) {
        console.log('onCancelFileButtonTap');

        var form = Ext.ComponentQuery.query('#fileForm')[0];
        form.reset();
    },

    onLoadFileButtonTap: function(button, e, eOpts) {
        console.log('onLoadFileButtonTap');

        var info = Ext.getStore('PersonalInfos').getAt(0);
        var form = Ext.ComponentQuery.query('#fileForm')[0];
        form.setRecord(info);
    },

    onDeleteFileButtonTap: function(button, e, eOpts) {
        console.log('onDeleteFileButtonTap');

        Ext.getStore('PersonalInfos').removeAll();
        this.onCancelFileButtonTap();
        Ext.Msg.alert('Attention', 'The Personal Info\'s store has been deleted.');
    },

    onBackupFileButtonTap: function(button, e, eOpts) {
        console.log('onBackupFileButtonTap');

        var store = Ext.getStore('PersonalInfos');
        var record = store.getAt(0).getData();
        var string = Ext.JSON.encode(record);

        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, gotFS, fail);

        function gotFS(fileSystem) {
            console.log('gotFs');

            fileSystem.root.getDirectory('ArchitectApp', {create: true, exclusive: false}, gotDirectoryEntry, fail);
        }

        function gotDirectoryEntry(directoryEntry) {
            console.log('gotDirectoryEntry');

            directoryEntry.getFile('backupPersonalInfo.txt', {create: true, exclusive: false}, gotFileEntry, fail);
        }

        function gotFileEntry(fileEntry) {
            console.log('gotFileEntry');
            fileEntry.createWriter(gotFileWriter, fail);
        }

        function gotFileWriter(writer) {
            console.log('gotFileWriter');
            writer.onwrite = function(evt) {
                console.log('onWrite');
                Ext.Msg.alert('Success', 'The Personal Info\'s store has been backed up.');
            };
            writer.write(string);
        }

        function fail(error) {
            console.log(error.code);
            Ext.Msg.alert('Error', error.code);
        }
    },

    onRestoreFileButtonTap: function(button, e, eOpts) {
        console.log('onRestoreFileButtonTap');

        var me = this;

        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, gotFS, fail);

        function gotFS(fileSystem) {
            console.log('gotFS');

            fileSystem.root.getDirectory('ArchitectApp', null, gotDirectoryEntry, fail);
        }

        function gotDirectoryEntry(directoryEntry) {
            console.log('gotDirectoryEntry');

            directoryEntry.getFile('backupPersonalInfo.txt', null, gotFileEntry, fail);
        }

        function gotFileEntry(fileEntry) {
            console.log('gotFileEntry');

            fileEntry.file(gotFile, fail);
        }

        function gotFile(file) {
            console.log('gotFile');

            readAsText(file);
        }

        function readAsText(file) {
            console.log('readAsText');

            var reader = new FileReader();

            reader.onload = function(evt) {
                console.log('onLoad');
                var personalInfoStore = Ext.getStore('PersonalInfos');
                var object = Ext.JSON.decode(evt.target.result);
                var record = Ext.create('ArchitectApp.model.PersonalInfo', object);

                personalInfoStore.insert(0,record);
                personalInfoStore.sync();
                me.onLoadFileButtonTap();
            };

            reader.readAsText(file);
        }

        function fail(error) {
            console.log(error.code);
            Ext.Msg.alert('Error', error.code);
        }
    },

    onAudioButtonTap: function(button, e, eOpts) {
        console.log('onAudioButtonTap');

        navigator.device.capture.captureAudio(this.onCaptureMediaSuccess, this.onCaptureError);
    },

    onVideoButtonTap: function(button, e, eOpts) {
        console.log('onVideoButtonTap');

        navigator.device.capture.captureVideo(this.onCaptureMediaSuccess, this.onCaptureError);
    },

    onImageButtonTap: function(button, e, eOpts) {
        console.log('onImageButtonTap');

        navigator.device.capture.captureImage(this.onCaptureMediaSuccess, this.onCaptureError);
    },

    onMediaListDisclose: function(list, record, target, index, e, eOpts) {
        console.log('onMediaListDisclose');

        var media = Ext.ComponentQuery.query('container#mediaContainer')[0];


        if (record.get('type').search(/^image/) != -1) {
            media.getComponent('imagePanel').getComponent('image').setSrc(record.get('path'));
            media.setActiveItem('#imagePanel');
            Ext.ComponentQuery.query('titlebar#homeTitleBar')[0].setTitle('Image');
        } else {
            if (record.get('type').search(/^audio/) != -1) {
                media.getComponent('audioPanel').getComponent('audio').setUrl(record.get('path'));
                media.setActiveItem('#audioPanel');
                Ext.ComponentQuery.query('titlebar#homeTitleBar')[0].setTitle('Audio');
            }
            else if(record.get('type').search(/^video/) != -1){
                media.getComponent('videoPanel').getComponent('video').setUrl(record.get('path'));
                media.setActiveItem('#videoPanel');
                Ext.ComponentQuery.query('titlebar#homeTitleBar')[0].setTitle('Video');
            }

            Ext.ComponentQuery.query('panel#mediaControlPanel')[0].setHidden(false);

        }

        Ext.ComponentQuery.query('button#backMediaButton')[0].setHidden(false);
    },

    onBackMediaButtonTap: function(button, e, eOpts) {
        console.log('onBackMediaButtonTap');

        Ext.ComponentQuery.query('button#backMediaButton')[0].setHidden(true);
        Ext.ComponentQuery.query('panel#mediaControlPanel')[0].setHidden(true);

        Ext.ComponentQuery.query('container#mediaContainer')[0].setActiveItem('#mediaPanel');
    },

    onCameraCaptureSuccess: function(image) {
        console.log('onCameraCaptureSuccess');

        var store = Ext.getStore('Pictures');
        var record = Ext.create('ArchitectApp.model.Picture', {
            url: image,
            timestamp: new Date()
        });
        store.add(record);
        store.sync();
    },

    onCameraCaptureFailure: function() {
        console.log('onCameraCaptureFailure');

        Ext.Msg.alert('Error', 'Something went wrong.');
    },

    launch: function() {
        console.log('onControllerLaunch');

        Ext.getStore('Barcodes').load();
        Ext.getStore('Pictures').load();
        Ext.getStore('Contacts').load();
        Ext.getStore('PersonalInfos').load();
        Ext.getStore('AudioVideos').load();
    },

    onContactSuccess: function(contacts) {
        console.log('onContactSuccess');

        Ext.Msg.alert('Success', 'The contacts has been successfully loaded.');

        var contactsStore = Ext.getStore('Contacts');

        for (var i = 0; i < contacts.length; i++) {
            var deviceContact = contacts[i];

            var contact = Ext.create('ArchitectApp.model.Contact', {
                name: '',
                surname: '',
                address: '',
                email: '',
                phoneNumber: ''

            });

            if (deviceContact.name) {
                if (deviceContact.name.givenName) {
                    contact.set('name', deviceContact.name.givenName);
                }
                if (deviceContact.name.familyName) {
                    contact.set('surname', deviceContact.name.familyName);
                }
            }

            if (deviceContact.addresses) {
                contact.set('address', deviceContact.addresses[0].value);
            }

            if (deviceContact.emails) {
                contact.set('email', deviceContact.emails[0].value);
            }

            if (deviceContact.phoneNumbers) {
                contact.set('phoneNumber', deviceContact.phoneNumbers[0].value);
            }

            contactsStore.add(contact);
        }

        contactsStore.sync();
    },

    onContactError: function(contactError) {
        console.log('onContactError');

        Ext.Msg.alert('Error retrieving contacts', contactError.code);
    },

    onCaptureMediaSuccess: function(mediaFiles) {
        console.log('onCaptureMediaSuccess');

        var now = new Date();
        var newMedia = Ext.create('ArchitectApp.model.AudioVideo', {
            name: mediaFiles[0].name,
            path: mediaFiles[0].fullPath,
            type: mediaFiles[0].type,
            timestamp: now
        });

        var mediaStore = Ext.getStore('AudioVideos');
        mediaStore.add(newMedia);
        mediaStore.sync();
    },

    onCaptureError: function(error) {
        console.log('onCaptureError');

        Ext.Msg.alert('Error', error.code);
    },

    onLocateSuccess: function(position) {
        console.log('onLocateSuccess');

        var record = Ext.create('ArchitectApp.model.Position', {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
            altitude: position.coords.altitude,
            accuracy: position.coords.accuracy,
            altitudeAccuracy: position.coords.altitudeAccuracy,
            heading: position.coords.heading,
            speed: position.coords.speed,
            timestamp: position.timestamp
        });

        var store = Ext.getStore('Positions');
        store.add(record);
        store.sync();

        var mapCmp = Ext.ComponentQuery.query('map#map')[0];
        mapCmp.setMapCenter(position.coords);
        mapCmp.setMapOptions({
            zoom: 15
        });

        var marker = new google.maps.Marker({
            map: mapCmp.getMap(),
            position: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
            icon: 'resources/images/maps-32.png',
            animation: google.maps.Animation.DROP
        });
    },

    onLocateError: function(error) {
        console.log('onLocateError');

        Ext.Msg.alert('Error retrieving position', 'Error: ' + error.code + ', message: ' + error.message );
    }

});